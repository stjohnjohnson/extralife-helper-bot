name: Release and Deploy

on:
  push:
    branches: [main]

permissions:
  contents: write
  packages: write
  pull-requests: write

jobs:
  test-and-release:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run linting
        run: npm run lint

      - name: Run tests
        run: npm test

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Determine version bump
        id: version
        run: |
          # Get the latest commit message
          COMMIT_MSG=$(git log -1 --pretty=%B)
          echo "Commit message: $COMMIT_MSG"
          
          # Determine version bump type based on conventional commits
          if echo "$COMMIT_MSG" | grep -qE "^feat(\(.+\))?!:|BREAKING CHANGE:"; then
            echo "bump=major" >> $GITHUB_OUTPUT
            echo "Version bump: major (breaking change)"
          elif echo "$COMMIT_MSG" | grep -qE "^feat(\(.+\))?:"; then
            echo "bump=minor" >> $GITHUB_OUTPUT
            echo "Version bump: minor (new feature)"
          elif echo "$COMMIT_MSG" | grep -qE "^fix(\(.+\))?:|^perf(\(.+\))?:"; then
            echo "bump=patch" >> $GITHUB_OUTPUT
            echo "Version bump: patch (bug fix)"
          else
            echo "bump=patch" >> $GITHUB_OUTPUT
            echo "Version bump: patch (default)"
          fi

      - name: Bump version and create tag
        id: tag
        run: |
          # Configure git
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          # Get current version
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          echo "Current version: $CURRENT_VERSION"
          
          # Bump version based on type
          if [ "${{ steps.version.outputs.bump }}" = "major" ]; then
            NEW_VERSION=$(npm version major --no-git-tag-version)
          elif [ "${{ steps.version.outputs.bump }}" = "minor" ]; then
            NEW_VERSION=$(npm version minor --no-git-tag-version)
          else
            NEW_VERSION=$(npm version patch --no-git-tag-version)
          fi
          
          # Remove 'v' prefix that npm version adds
          NEW_VERSION=${NEW_VERSION#v}
          echo "New version: $NEW_VERSION"
          echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "tag=v$NEW_VERSION" >> $GITHUB_OUTPUT
          
          # Commit the version bump
          git add package.json package-lock.json
          git commit -m "chore(release): bump version to $NEW_VERSION [skip ci]"
          
          # Create and push tag
          git tag "v$NEW_VERSION"
          git push origin main
          git push origin "v$NEW_VERSION"

      - name: Generate changelog
        id: changelog
        run: |
          # Get commits since last tag (excluding the version bump commit)
          LAST_TAG=$(git describe --tags --abbrev=0 HEAD~1 2>/dev/null || echo "")
          
          if [ -z "$LAST_TAG" ]; then
            COMMITS=$(git log --pretty=format:"- %s" --no-merges HEAD~1)
          else
            COMMITS=$(git log --pretty=format:"- %s" --no-merges ${LAST_TAG}..HEAD~1)
          fi
          
          # Create changelog
          CHANGELOG="## Changes in ${{ steps.tag.outputs.tag }}

          $COMMITS"
          
          # Save changelog to output (escape newlines)
          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGELOG" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            ghcr.io/stjohnjohnson/extralife-helper-bot:latest
            ghcr.io/stjohnjohnson/extralife-helper-bot:${{ steps.tag.outputs.version }}
          labels: |
            org.opencontainers.image.title=extralife-helper-bot
            org.opencontainers.image.description=Extra Life Helper Bot
            org.opencontainers.image.version=${{ steps.tag.outputs.version }}
            org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}
            org.opencontainers.image.revision=${{ github.sha }}

      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.tag.outputs.tag }}
          release_name: Release ${{ steps.tag.outputs.tag }}
          body: ${{ steps.changelog.outputs.changelog }}
          draft: false
          prerelease: false